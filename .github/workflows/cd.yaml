name: Continuous Deployment
on:
  workflow_run:
    workflows: ["CI tests"]
    types:
      - completed
    branches: [ "main" ]

permissions:
  contents: write
  discussions: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-2022
    env:
      BUILD_CONFIG: Release
      NET_VERSION: net481

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-tags: true
        fetch-depth: 0

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln*', '**/*.csproj*') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: |
        dotnet restore PdfToImageConverter.csproj
    
    - name: Build solution for release
      run: |
        dotnet build PdfToImageConverter.csproj --configuration ${{ env.BUILD_CONFIG }} --no-restore

    - name: Prepare Release Files
      shell: pwsh
      run: |
        # Define paths
        $buildPath = "${{ github.workspace }}\bin\${{ env.BUILD_CONFIG }}\${{ env.NET_VERSION }}"
        $releaseDir = "${{ github.workspace }}\release-files"
        
        # Create release directory
        New-Item -Path $releaseDir -ItemType Directory -Force
        
        # Copy all build artifacts recursively
        if (Test-Path $buildPath) {
            Copy-Item -Path "$buildPath\*" -Destination $releaseDir -Recurse -Force
            Write-Host "Copied build artifacts from $buildPath to $releaseDir"
            
            # List copied files for verification
            Write-Host "`nFiles included in release:"
            Get-ChildItem -Path $releaseDir -Recurse | Where-Object { !$_.PSIsContainer } | ForEach-Object {
                Write-Host $_.FullName.Replace($releaseDir, '')
            }
        } else {
            Write-Host "::error::Build output directory not found at: $buildPath"
            exit 1
        }
        
        # Create ZIP archive
        Compress-Archive -Path "$releaseDir\*" -DestinationPath "$releaseDir\PdfToImageConverter-Full.zip" -Force
        
    - name: Get latest release version and Generate release notes
      id: get_latest_release
      shell: pwsh
      run: |
        # Set error action preference and encoding
        $ErrorActionPreference = "Stop"
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        
        # Get latest tag or create initial version
        try {
            $latest_release = git describe --tags --abbrev=0 2>$null
            
            if ($LASTEXITCODE -eq 0 -and -not [string]::IsNullOrWhiteSpace($latest_release)) {
                Write-Host "Latest release version: $latest_release"
                
                # Parse version and increment
                $versionParts = $latest_release.TrimStart('v').Split('.')
                $versionParts[-1] = [int]$versionParts[-1] + 1
                $newVersionString = "v" + ($versionParts -join '.')
                
                # Get changes since last release
                $changes = git log "$latest_release..HEAD" --pretty=format:"* %s (%h)" --no-merges
                if ($LASTEXITCODE -ne 0) { $changes = @("* Initial changes") }
                
                # Get modified files
                $fileChanges = git diff --name-status "$latest_release..HEAD" | ForEach-Object {
                    if (-not [string]::IsNullOrWhiteSpace($_)) {
                        $parts = $_.Split("`t")
                        if ($parts.Length -ge 2) {
                            $status = $parts[0].Trim()
                            $file = $parts[1].Trim()
                            switch($status) {
                                "M" { "* Modified: $file" }
                                "A" { "* Added: $file" }
                                "D" { "* Deleted: $file" }
                                default { "* Changed: $file" }
                            }
                        }
                    }
                }
                if ($LASTEXITCODE -ne 0) { $fileChanges = @() }
                
            } else {
                Write-Host "No previous release found. Creating initial release."
                $newVersionString = "v0.0.1"
                $changes = @("* Initial release")
                $fileChanges = git ls-files | ForEach-Object { "* $_" }
            }
            
            # Build release notes
            $releaseNotes = @"
            ## Release $newVersionString

            ### Changes since $($latest_release ?? "initial version")
            $($changes -join "`n")

            ### Modified Files
            $($fileChanges -join "`n")

            ### Build Information
            * Build Configuration: ${{ env.BUILD_CONFIG }}
            * .NET Version: ${{ env.NET_VERSION }}
            * Build Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")
        "@
            
            # Set environment variables for the release
            Add-Content -Path $env:GITHUB_ENV -Value "new_release=$newVersionString"
            Add-Content -Path $env:GITHUB_ENV -Value "release_notes<<EOF"
            Add-Content -Path $env:GITHUB_ENV -Value $releaseNotes
            Add-Content -Path $env:GITHUB_ENV -Value "EOF"
            
            # Save release notes to file for debugging
            $releaseNotes | Out-File -FilePath "releaseNotes.txt" -Encoding utf8
            
            Write-Host "Successfully generated release notes for version $newVersionString"
            
        } catch {
            Write-Host "::error::Failed to generate release notes: $_"
            Write-Host $_.ScriptStackTrace
            exit 1
        }

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ github.workspace }}\release-files\PdfToImageConverter-Full.zip
          ${{ github.workspace }}\release-files\PdfToImageConverter.dll
        tag_name: ${{ env.new_release }}
        name: Release ${{ env.new_release }}
        body: ${{ env.release_notes }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: true

