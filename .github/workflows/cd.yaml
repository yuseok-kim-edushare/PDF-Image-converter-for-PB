name: Continuous Deployment
on:
  workflow_run:
    workflows: ["CI tests"]
    types:
      - completed
    branches: [ "main" ]

permissions:
  contents: write
  discussions: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-2022
    env:
      BUILD_CONFIG: Release
      NET_VERSION: net481

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-tags: true
        fetch-depth: 0

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln*', '**/*.csproj*') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: |
        dotnet restore PdfToImageConverter.csproj
    
    - name: Build solution for release
      run: |
        dotnet build PdfToImageConverter.csproj --configuration ${{ env.BUILD_CONFIG }} --no-restore

    - name: Prepare Release Files
      shell: pwsh
      run: |
        # Define paths
        $buildPath = "${{ github.workspace }}\bin\${{ env.BUILD_CONFIG }}\${{ env.NET_VERSION }}"
        $releaseDir = "${{ github.workspace }}\release-files"
        
        # Create release directory
        New-Item -Path $releaseDir -ItemType Directory -Force
        
        # Copy all build artifacts recursively
        if (Test-Path $buildPath) {
            Copy-Item -Path "$buildPath\*" -Destination $releaseDir -Recurse -Force
            Write-Host "Copied build artifacts from $buildPath to $releaseDir"
            
            # List copied files for verification
            Write-Host "`nFiles included in release:"
            Get-ChildItem -Path $releaseDir -Recurse | Where-Object { !$_.PSIsContainer } | ForEach-Object {
                Write-Host $_.FullName.Replace($releaseDir, '')
            }
        } else {
            Write-Host "::error::Build output directory not found at: $buildPath"
            exit 1
        }
        
        # Create ZIP archive
        Compress-Archive -Path "$releaseDir\*" -DestinationPath "$releaseDir\PdfToImageConverter-Full.zip" -Force
        
    - name: Get latest release version and Generate release notes
      id: get_latest_release
      shell: pwsh
      run: |
        # Set error action preference
        $ErrorActionPreference = "Stop"
        
        function Get-FormattedChanges {
            param (
                [string]$FromRef,
                [string]$ToRef = "HEAD"
            )
            
            $changes = git log "$ToRef" "^$FromRef" --pretty=format:"* %s (%h)" --no-merges
            if ($LASTEXITCODE -ne 0) { return $null }
            return $changes
        }
        
        function Get-FormattedFileChanges {
            param (
                [string]$FromRef,
                [string]$ToRef = "HEAD"
            )
            
            $fileChanges = git diff --name-status "$ToRef" "^$FromRef"
            if ($LASTEXITCODE -ne 0) { return $null }
            
            $formatted = @()
            foreach ($change in $fileChanges) {
                if ([string]::IsNullOrWhiteSpace($change)) { continue }
                
                $parts = $change.Split("`t")
                if ($parts.Length -lt 2) { continue }
                
                $status = $parts[0].Trim()
                $file = $parts[1].Trim()
                
                $line = switch($status) {
                    "M" { "* Modified: $file" }
                    "A" { "* Added: $file" }
                    "D" { "* Deleted: $file" }
                    default { "* Changed: $file" }
                }
                $formatted += $line
            }
            return $formatted
        }

        try {
            # Try to get the latest tag
            $latest_release = $(git describe --tags --abbrev=0 2>$null)
            
            if ($LASTEXITCODE -eq 0 -and -not [string]::IsNullOrWhiteSpace($latest_release)) {
                Write-Host "Latest release version: $latest_release"
                
                # Parse version and increment
                $versionParts = $latest_release.TrimStart('v').Split('.')
                $versionParts[-1] = [int]$versionParts[-1] + 1
                $newVersionString = "v" + ($versionParts -join '.')
                
                # Get changes
                $changes = Get-FormattedChanges -FromRef $latest_release
                $fileChanges = Get-FormattedFileChanges -FromRef $latest_release
                
                $releaseNotes = @"
## Release $newVersionString

### Changes since $latest_release
$($changes -join "`n")

### Modified Files
$($fileChanges -join "`n")

### Build Information
* Build Configuration: ${{ env.BUILD_CONFIG }}
* .NET Version: ${{ env.NET_VERSION }}
* Build Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")
"@
            } else {
                Write-Host "No previous release found. Creating initial release."
                $newVersionString = "v0.0.1"
                
                $initialFiles = git ls-files | ForEach-Object { "* $_" }
                
                $releaseNotes = @"
## Initial Release $newVersionString

### Initial Files
$($initialFiles -join "`n")

### Build Information
* Build Configuration: ${{ env.BUILD_CONFIG }}
* .NET Version: ${{ env.NET_VERSION }}
* Build Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")
"@
            }
            
            # Set environment variables for the release
            "new_release=$newVersionString" | Out-File -FilePath $env:GITHUB_ENV -Append
            "release_notes<<EOF" | Out-File -FilePath $env:GITHUB_ENV -Append
            $releaseNotes | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
            "EOF" | Out-File -FilePath $env:GITHUB_ENV -Append
            
            # Also save to file for debugging
            $releaseNotes | Out-File -FilePath "releaseNotes.txt" -Encoding utf8
            
            Write-Host "Successfully generated release notes for version $newVersionString"
            
        } catch {
            Write-Host "::error::Failed to generate release notes: $_"
            Write-Host $_.ScriptStackTrace
            exit 1
        }

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ github.workspace }}\release-files\PdfToImageConverter-Full.zip
          ${{ github.workspace }}\release-files\PdfToImageConverter.dll
        tag_name: ${{ env.new_release }}
        name: Release ${{ env.new_release }}
        body: ${{ env.release_notes }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: true

