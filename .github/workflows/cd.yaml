name: Continuous Deployment
on:
  workflow_run:
    workflows: ["CI tests about Powerbuilder"]
    types:
      - completed
    branches: [ "main" ]

permissions:
  contents: write
  discussions: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-2022
    env:
      BUILD_CONFIG: Release
      NET_VERSION: net481

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-tags: true
        fetch-depth: 0

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln*', '**/*.csproj*') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: |
        dotnet restore PdfToImageConverter.csproj
    
    - name: Build solution for release
      run: |
        dotnet build PdfToImageConverter.csproj --configuration ${{ env.BUILD_CONFIG }} --no-restore -f net481

    - name: Install ILRepack
      run: |
        try {
             nuget install ILRepack -Version 2.0.40 -OutputDirectory ${{ github.workspace }}\packages
         } catch {
             Write-Host "Error installing ILRepack: $_" -ForegroundColor Red
         }

    - name: Prepare Release Files
      shell: pwsh
      run: |
        # Define paths
        $buildPath = "${{ github.workspace }}\bin\${{ env.BUILD_CONFIG }}\${{ env.NET_VERSION }}\win-x86"
        $releaseDir = "${{ github.workspace }}\release-files"
        
        # Create release directory
        New-Item -Path $releaseDir -ItemType Directory -Force
        
        # Copy all build artifacts recursively
        if (Test-Path $buildPath) {
            Copy-Item -Path "$buildPath\x86\*" -Destination $releaseDir -Recurse -Force
            Write-Host "Copied native dlls from $buildPath to $releaseDir"

            # Merge NET 4.8.1 DLLs (using ILRepack)
            ${{ github.workspace }}\packages\ILRepack.2.0.40\tools\ILRepack.exe /out:"$releaseDir\PdfToImageConverter.dll" `
                /lib:"$buildPath" `
                /targetplatform:"v4,C:\Windows\Microsoft.NET\Framework\v4.0.30319" `
                /union `
                /copyattrs `
                /internalize `
                /keyfile:"${{ github.workspace }}\PdfToImageConverter.snk" `
                "$buildPath\PdfToImageConverter.dll" `
                "$buildPath\Microsoft.Extensions.Logging.Abstractions.dll" `
                "$buildPath\PDFtoImage.dll" `
                "$buildPath\SkiaSharp.dll" `
                "$buildPath\System.Buffers.dll" `
                "$buildPath\System.Memory.dll" `
                "$buildPath\System.Numerics.Vectors.dll" `
                "$buildPath\System.Runtime.CompilerServices.Unsafe.dll" `
                "$buildPath\Microsoft.Bcl.AsyncInterfaces.dll" `
                "$buildPath\Microsoft.Extensions.DependencyInjection.Abstractions.dll" `
                "$buildPath\System.Diagnostics.DiagnosticSource.dll" `  
                "$buildPath\System.Threading.Tasks.Extensions.dll"

            # Delete unnecessary files
            $filesToDelete = @(
                "$releaseDir\libpdfium.so"
            )

            foreach ($file in $filesToDelete) {
                if (Test-Path $file) {
                    Remove-Item -Path $file -Force
                    Write-Host "Deleted: $file"
                }
            }
            
            # List remaining files for verification
            Write-Host "`nFiles included in release:"
            Get-ChildItem -Path $releaseDir -Recurse | Where-Object { !$_.PSIsContainer } | ForEach-Object {
                Write-Host $_.FullName.Replace($releaseDir, '')
            }
        } else {
            Write-Host "::error::Build output directory not found at: $buildPath"
            exit 1
        }
        
        # Create ZIP archive
        Compress-Archive -Path "$releaseDir\*" -DestinationPath "$releaseDir\PdfToImageConverter-Full.zip" -Force
        
    - name: Get latest release version and Generate release notes
      id: get_latest_release
      run: |
        try {
          $latest_release = $(git describe --tags --abbrev=0)
          Write-Output "Latest release version: $latest_release"
          echo "latest_release=$latest_release" >> $env:GITHUB_ENV
          $versionParts = $latest_release.Split('.')
          $versionParts[-1] = [int]$versionParts[-1] + 1
          $newVersionString = $versionParts -join '.'
          
          $releaseNotes = "## Changes in " + $latest_release + "`n"
          $releaseNotes += (git log HEAD ^$latest_release --oneline) -join "`n"
          $releaseNotes += "`n"
          $releaseNotes += "### File edited `n"
          $releaseNotes += "`n"
          $releaseNotes += (git diff HEAD ^$latest_release --compact-summary) -join "`n"
        } catch {
          Write-Output "No previous release found. Creating initial release 0.0.1"
          $newVersionString = "0.0.1"
          
          $releaseNotes = "## Initial Release v0.0.1`n"
          $releaseNotes += (git log --oneline) -join "`n"
          $releaseNotes += "`n"
          $releaseNotes += "### Files included `n"
          $releaseNotes += "`n"
          $releaseNotes += (git ls-files | ForEach-Object { "Added $_" }) -join "`n"
        }
        
        echo "new_release=$newVersionString" >> $env:GITHUB_ENV
        $releaseNotes | Out-File -FilePath releaseNotes.txt -Encoding utf8
        $releaseNotesContent = Get-Content -Path releaseNotes.txt -Raw
        echo "release_notes<<EOF" >> $env:GITHUB_ENV
        echo "$releaseNotesContent" >> $env:GITHUB_ENV
        echo "EOF" >> $env:GITHUB_ENV

    - name: Explicit Version Order apply to create release
      run: |
        $latestCommitMessage = (git log -1 --pretty=%B)
        foreach ($line in $latestCommitMessage) {
          if ($line -match "Update Version to (\d+\.\d+\.\d+)") {
            $messageParts = $line -split ' '
            $lastPart = $messageParts[-1]
            echo "new_release=$lastPart" >> $env:GITHUB_ENV
          }
        }
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ github.workspace }}\release-files\PdfToImageConverter-Full.zip
          ${{ github.workspace }}\release-files\PdfToImageConverter.dll
        tag_name: ${{ env.new_release }}
        name: Release ${{ env.new_release }}
        body: ${{ env.release_notes }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: true

